#!/usr/bin/env python2

import argparse
import logging
import math
import os
import StringIO
import sys

from PIL import Image
import numpy
import requests


logger = logging.getLogger('legiosa')


def roundup(a, b):
    return int(math.ceil(float(a) / b))


def int_to_rgb(c):
    return (c & 0xff0000) >> 16, (c & 0x00ff00) >> 8, c & 0x0000ff


reference_colors = [
    int_to_rgb(0xD9BB7B),
    int_to_rgb(0xD67240),
    int_to_rgb(0xDE000D),
    int_to_rgb(0x0057A8),
    int_to_rgb(0xFEC400),
    int_to_rgb(0x010101),
    int_to_rgb(0x007B28),
    int_to_rgb(0x009624),
    int_to_rgb(0xA83D15),
    int_to_rgb(0x478CC6),
    int_to_rgb(0xE76318),
    int_to_rgb(0x95B90B),
    int_to_rgb(0x9C006B),
    int_to_rgb(0x5E748C),
    int_to_rgb(0x8D7452),
    int_to_rgb(0x002541),
    int_to_rgb(0x003416),
    int_to_rgb(0x5F8265),
    int_to_rgb(0x80081B),
    int_to_rgb(0xF49B00),
    int_to_rgb(0x5B1C0C),
    int_to_rgb(0x9C9291),
    int_to_rgb(0x4C5156),
    int_to_rgb(0xE4E4DA),
    int_to_rgb(0x87C0EA),
    int_to_rgb(0xDE378B),
    int_to_rgb(0xEE9DC3),
    int_to_rgb(0xFFFF99),
    int_to_rgb(0x2C1577),
    int_to_rgb(0xF5C189),
    int_to_rgb(0x300F06),
    int_to_rgb(0xAA7D55),
    int_to_rgb(0x469bc3),
    int_to_rgb(0x68c3e2),
    int_to_rgb(0xd3f2ea),
    int_to_rgb(0xa06eb9),
    int_to_rgb(0xcda4de),
    int_to_rgb(0xf5f3d7),
    int_to_rgb(0xe2f99a),
    int_to_rgb(0x77774E),
    int_to_rgb(0x96B93B),
    ]


def select_color(col):
    best_color = None
    best_value = 3 * 256 * 256

    cr, cg, cb = col

    for r, g, b in reference_colors:
        dr = cr - r
        dg = cg - g
        db = cb - b

        value = dr * dr + dg * dg + db * db
        if best_value > value:
            best_value = value
            best_color = (r, g, b)

    assert best_color is not None

    return best_color


def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser()
    parser.add_argument('--bricks', '-b', type=int, default=10)
    parser.add_argument('--output', '-o')
    parser.add_argument('--verbose', '-v', action='store_true')
    parser.add_argument('file')

    args = parser.parse_args(argv)

    logger.setLevel(logging.DEBUG if args.verbose else logging.ERROR)

    if args.output is not None and not os.path.exists(args.output):
        raise ValueError('output directory does not exist')

    filename = os.path.expandvars(args.file)
    filename = os.path.expanduser(args.file)

    # If the filename does not refer to a path on the filesystem, perhaps it is
    # a URL.
    if not os.path.exists(filename):
        response = requests.get(filename)
        image = Image.open(StringIO.StringIO(response.content))

    else:
        image = Image.open(filename)

    brick = Image.open('brick.png')

    cols, rows = image.size
    bcols, brows = brick.size

    assert bcols == brows

    cols = bcols * roundup(cols, bcols)
    rows = brows * roundup(rows, brows)

    scale = roundup(args.bricks * min(brows, bcols), min(rows, cols))

    rows = scale * rows
    cols = scale * cols

    image = image.resize((cols, rows), resample=Image.ANTIALIAS)

    array = numpy.asarray(image)
    array.setflags(write=True)

    for r in range(rows / brows):
        for c in range(cols / bcols):
            u = brows * r
            v = brows * (r + 1)
            s = bcols * c
            t = bcols * (c + 1)

            array[u:v, s:t] = select_color(array[u:v, s:t].mean(axis=(0,1)))

    image = Image.fromarray(array)

    bands = list(brick.split())
    bands[3] = bands[3].point(lambda x: 0.3 * x)

    overlay = Image.merge("RGBA", bands)

    for r in range(rows / brows):
        for c in range(cols / bcols):
            u = brows * r
            v = bcols * c
            image.paste(overlay, (v, u), overlay)

    _, basename = os.path.split(args.file)

    dirname = '.' if args.output is None else args.output
    image.save('{}/lego-{}'.format(dirname, basename))


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)

    try:
        main()

    except Exception as e:
        logger.exception(e)
